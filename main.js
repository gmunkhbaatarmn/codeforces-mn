// Generated by CoffeeScript 2.4.1
//:1 string: start_with, end_with, contain, is_numeric
var STYLE, VERSION, box_html, row_tmpl, translate;

String.prototype.start_with = function(str) {
  return this.substr(0, str.length) === str;
};

String.prototype.end_with = function(str) {
  return this.slice(-str.length) === str;
};

String.prototype.contain = function(str) {
  return this.indexOf(str) > -1;
};

String.prototype.is_numeric = function() {
  return !isNaN(parseFloat(this)) && isFinite(this);
};

// endfold

// Note: Also set on `manifest.json`
VERSION = "0.2.5";

STYLE = "<style>\n  .mn-please a          { font-weight:bold; cursor:pointer }\n  .mn-statement ul      { margin-bottom:1em }\n  .mn-statement .credit { text-align:right; font-style:italic }\n  .sample-tests .title  { font-family:sans-serif !important;\n                          font-size:1em !important;\n                          text-transform:none !important }\n</style>";

//:1 Mongolian flag for language chooser
$(function() {
  return $("#header .lang-chooser > div:first").prepend("<a href=\"https://codeforces.mn/\" style=\"text-decoration:none\">\n  <img src=\"https://codeforces.mn/images/flag-mn.png\" title=\"Монголоор\">\n</a>");
});

// endfold

//:1 Update data
$.get(`https://codeforces.mn/extension?${VERSION}`, function(text) {
  var c, i, j, k, l, len, len1, len2, ready, ref, ref1, ref2, storage, t, total;
  storage = {};
  ref = text.split("\n")[0].split("|");
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    storage[`problem:${i}`] = 1;
  }
  ref1 = text.split("\n")[1].split("|");
  for (k = 0, len1 = ref1.length; k < len1; k++) {
    c = ref1[k];
    i = c.split(":")[0];
    ready = Number(c.split(":")[1].split("/")[0]);
    total = Number(c.split(":")[1].split("/")[1]);
    storage[`contest:${i}`] = {
      ready: ready,
      total: total
    };
  }
  storage.credits = [];
  ref2 = text.split("\n")[2].split("|");
  for (l = 0, len2 = ref2.length; l < len2; l++) {
    t = ref2[l];
    storage.credits.push(t.split(":"));
  }
  storage.total = text.split("\n")[3];
  return localStorage.mn = JSON.stringify(storage);
});

// endfold

//:1 Page: /                     - Home page
if (location.pathname === "/") {
  //:2 box_html = "..."
  box_html = "<div class=\"roundbox sidebox top-contributed top-translators\">\n  <div class=\"roundbox-lt\">&nbsp;</div>\n  <div class=\"roundbox-rt\">&nbsp;</div>\n  <div class=\"caption titled\">→ Top translators</div>\n  <table class=\"rtable \">\n    <tr>\n      <th class=\"left\" style=\"width:2.25em\">#</th>\n      <th>User</th>\n      <th style=\"font-size:13px\">{ready}/{total}</th>\n    </tr>\n    {content}\n  </table>\n</div>";
  //:2 row_tmpl = "..."
  row_tmpl = "<tr style=\"display:{display}\" class=\"{class}\">\n  <td class=\"left\">{place}</td>\n  <td>{name}</td>\n  <td>{score}</td>\n</tr>";
  // endfold

  // Contribution score panel
  $(function() {
    var colorful, content, j, len, name, place, ready, ref, row_html, score, storage;
    $("head").append("<style>\n  .top-translators table tr:last-child td {\n    border-bottom: none\n  }\n  .top-translators .bottom-links {\n    background: #f5f5f5;\n    border-left: none !important;\n    font-size: 11px !important;\n    text-align: right !important\n  }\n</style>");
    storage = JSON.parse(localStorage.mn || "{}");
    //:2 colorful = function(name, score)
    colorful = function(name, score) {
      var color;
      score = Number(score);
      if (score >= 0) {
        color = "gray";
      }
      if (score >= 25) {
        color = "green";
      }
      if (score >= 50) {
        color = "blue";
      }
      if (score >= 75) {
        color = "orange";
      }
      if (score >= 100) {
        color = "red";
      }
      return `<a class="rated-user user-${color}">${name}</a>`;
    };
    // endfold
    if (storage.credits) {
      //:2 Middle rows
      content = "";
      ready = 0;
      ref = storage.credits;
      for (place = j = 0, len = ref.length; j < len; place = ++j) {
        [name, score] = ref[place];
        row_html = row_tmpl.replace("{place}", place + 1);
        row_html = row_html.replace("{name}", colorful(name, score));
        row_html = row_html.replace("{score}", score);
        if (place % 2 === 0) {
          row_html = row_html.replace("{class}", "dark");
        } else {
          row_html = row_html.replace("{class}", "");
        }
        if (place >= 10) {
          row_html = row_html.replace("{display}", "none");
        } else {
          row_html = row_html.replace("{display}", "table-row");
        }
        content += row_html;
        ready += Number(score);
      }
      //:2 Last row
      content += "<tr>\n  <td class=\"bottom-links\" colspan=\"3\">\n    <a href=\"javascript:;\" class=\"js-more\">View all &rarr;</a>\n  </td>\n</tr>";
      // endfold
      box_html = box_html.replace("{ready}", ready);
      box_html = box_html.replace("{total}", storage.total);
      box_html = box_html.replace("{content}", content);
      $("#sidebar .top-contributed:first").before(box_html);
      return $(".top-translators .js-more").on("click", function() {
        $(this).closest("table").find("tr").show();
        return $(this).closest("tr").fadeOut().remove();
      });
    }
  });
}

//:1 Page: /problemset/          - List of problems
if (location.pathname.match(/\/problemset(?!\/problem\/)/)) {
  // Highlight translated problems
  $(function() {
    var storage;
    $("head").append("<style>\n  .problems tr td:nth-child(2) > div:first-child {\n    margin-left: 14px\n  }\n  .problems .mn td:nth-child(2) > div:first-child {\n    margin-left: 0\n  }\n  .problems .mn td:nth-child(2) > div:first-child a:before {\n    content: \"✱ \";\n    color: #c900a9;\n    display: inline-block;\n    float: left;\n    margin-right: 4px;\n    text-decoration: none\n  }\n</style>");
    storage = JSON.parse(localStorage.mn || "{}");
    return $(".problems tr").each(function() {
      var problem_id;
      problem_id = $(this).find("td.id").text().trim().replace(/(\d+)/, "$1-");
      if (storage[`problem:${problem_id}`]) {
        return $(this).addClass("mn");
      }
    });
  });
}

//:1 Page: /problemset/problem/  - Read a problem
if (location.pathname.match(/\/problemset\/problem\//)) {
  // Button: "Монголоор унших"
  $(function() {
    var permalink, problem_id, storage;
    $("head").append(STYLE);
    storage = JSON.parse(localStorage.mn || "{}");
    problem_id = location.pathname.replace("/problemset/problem/", "");
    problem_id = problem_id.replace("/", "-").toUpperCase();
    if (storage[`problem:${problem_id}`]) {
      $(".problem-statement .header .title").after("<div class=\"mn-please\"><a>Монголоор унших</a></div>");
    }
    $(".mn-please a").on("click", translate);
    permalink = "https://codeforces.mn/problemset/problem/";
    permalink += problem_id.replace("-", "/");
    return $(".problem-statement").after(`<div class="fb-comments" data-href="${permalink}" data-width="100%"></div>\n<div id="fb-root"></div>\n<script>(function(d, s, id) {\n  var js, fjs = d.getElementsByTagName(s)[0];\n  if (d.getElementById(id)) return;\n  js = d.createElement(s); js.id = id;\n  js.src = "//connect.facebook.net/mn_MN/sdk.js#xfbml=1&version=v2.5&appId=888802607881779";\n  fjs.parentNode.insertBefore(js, fjs);\n}(document, "script", "facebook-jssdk"));\n</script>`);
  });
}

//:1 Page: /contests/            - List of contests
if (location.pathname.start_with("/contests")) {
  // Content list with translated problem count
  $(function() {
    var storage;
    $("head").append("<style>\n  .mn      { font-size:0.9em; color:#666666 }\n  .mn-full { font-size:0.9em; color:#c900a9; font-weight:bold }\n</style>");
    storage = JSON.parse(localStorage.mn || "{}");
    return $(".contests-table tr td:nth-child(1)").each(function() {
      var contest_id, ready, ref, ref1, span, total;
      $(this).find("a")[0].innerHTML = "Enter";
      if ($(this).find("a").length === 2) {
        $(this).find("a:first").next()[0].outerHTML = "<span>&middot;</span> ";
        $(this).find("a")[1].innerHTML = "Virtual participation";
      } else {
        // Hide contest are not possible to practice
        $(this).closest("tr").hide();
      }
      contest_id = $(this).find("a:first").attr("href").replace("/contest/", "");
      while (contest_id.length < 3) {
        contest_id = `0${contest_id}`;
      }
      ready = ((ref = storage[`contest:${contest_id}`]) != null ? ref.ready : void 0) || 0;
      total = ((ref1 = storage[`contest:${contest_id}`]) != null ? ref1.total : void 0) || 0;
      if (ready <= 0) {
        return;
      }
      span = ready === total ? "mn-full" : "mn";
      return $(this).append(`<span class="${span}">Орчуулагдсан: ${ready} / ${total}</span>`);
    });
  });
}

//:1 Page: /contest/ID/          - List of problems in contest
if (location.pathname.match(/^\/contest\/\d+\/?$/)) {
  // Highlight translated problems
  $(function() {
    var storage;
    $("head").append("<style>\n  .problems tr td:nth-child(2) > div:first-child {\n    margin-left: 14px\n  }\n  .problems .mn td:nth-child(2) > div:first-child {\n    margin-left: 0\n  }\n  .problems .mn td:nth-child(2) > div:first-child a:before {\n    content: \"✱ \";\n    color: #c900a9;\n    display: inline-block;\n    float: left;\n    margin-right: 4px;\n    text-decoration: none\n  }\n</style>");
    storage = JSON.parse(localStorage.mn || "{}");
    return $(".problems tr").each(function() {
      var problem_id;
      problem_id = location.pathname.replace("/contest/", "").replace("/", "");
      problem_id = problem_id + "-" + $(this).find("td.id").text().trim();
      if (storage[`problem:${problem_id}`]) {
        return $(this).addClass("mn");
      }
    });
  });
}

//:1 Page: /contest/ID/problem/  - Read a problem in contest
if (location.pathname.match(/^\/contest\/\d+\/problem\//)) {
  // Button: "Монголоор унших"
  $(function() {
    var permalink, problem_id, storage;
    $("head").append(STYLE);
    storage = JSON.parse(localStorage.mn || "{}");
    problem_id = location.pathname.replace("/contest/", "");
    problem_id = problem_id.replace("/problem/", "-").toUpperCase();
    if (storage[`problem:${problem_id}`]) {
      $(".problem-statement .header .title").after("<div class=\"mn-please\"><a>Монголоор унших</a></div>");
    }
    $(".mn-please a").on("click", translate);
    permalink = "https://codeforces.mn/problemset/problem/";
    permalink += problem_id.replace("-", "/");
    return $(".problem-statement").after(`<div class="fb-comments" data-href="${permalink}" data-width="100%"></div>\n<div id="fb-root"></div>\n<script>(function(d, s, id) {\n  var js, fjs = d.getElementsByTagName(s)[0];\n  if (d.getElementById(id)) return;\n  js = d.createElement(s); js.id = id;\n  js.src = "//connect.facebook.net/mn_MN/sdk.js#xfbml=1&version=v2.5&appId=888802607881779";\n  fjs.parentNode.insertBefore(js, fjs);\n}(document, "script", "facebook-jssdk"));\n</script>`);
  });
}

// endfold

//:1 Function: translate problem statement
translate = function() {
  var problem_id;
  if (location.pathname.start_with("/problemset/problem/")) {
    problem_id = location.pathname.replace("/problemset/problem/", "");
    problem_id = problem_id.replace("/", "-").toUpperCase();
  }
  if (location.pathname.start_with("/contest/")) {
    problem_id = location.pathname.replace("/contest/", "");
    problem_id = problem_id.replace("/problem/", "-").toUpperCase();
  }
  $(".mn-please").fadeOut("fast", function() {
    return $(this).html("<strong>Орчуулж байна...</strong>").fadeIn("fast");
  });
  return $.get(`https://codeforces.mn/extension/${problem_id}.html?${VERSION}`, function(r) {
    var $r, body, curr, el;
    $(".problem-statement").addClass("mn-statement");
    $r = $("<div/>").html(r);
    //:2 Replace: problem name
    $(".header .title").html(`${problem_id.slice(-1)}. ${$r.find("h1").html()}`);
    //:2 Replace: problem statement
    body = [];
    curr = $r.find("h1").next();
    while (curr[0] && curr[0].tagName !== "H3") {
      body.push(curr[0].outerHTML);
      curr = curr.next();
    }
    $(".header").next().html(body.join("\n"));
    //:2 Replace: input
    body = [];
    curr = $r.find("h3").next();
    while (curr[0] && curr[0].tagName !== "H3") {
      body.push(curr[0].outerHTML);
      curr = curr.next();
    }
    $(".input-specification").html(`<div class="section-title">Оролт</div>\n${body.join("\n")}`);
    //:2 Replace: output
    body = [];
    curr = $r.find("h3:eq(1)").next();
    while (curr[0] && curr[0].tagName !== "H3") {
      body.push(curr[0].outerHTML);
      curr = curr.next();
    }
    $(".output-specification").html(`<div class="section-title">Гаралт</div>\n${body.join("\n")}`);
    //:2 Replace: sample test(s)
    $(".sample-tests .section-title").html("Жишээ тэстүүд");
    $(".sample-tests .section-title").html("Жишээ тэстүүд");
    $(".sample-tests .sample-test .input .title").html("Оролт");
    $(".sample-tests .sample-test .output .title").html("Гаралт");
    //:2 Replace: note
    if ($r.find("h3:eq(2)").length) {
      body = [];
      curr = $r.find("h3:eq(2)").next();
      while (curr[0] && curr[0].tagName !== "H3") {
        body.push(curr[0].outerHTML);
        curr = curr.next();
      }
      $(".problem-statement .note").html(`<div class="section-title">Тэмдэглэл</div>\n${body.join("\n")}`);
    }
    // endfold
    $(".mn-please").fadeOut("fast");
    // render MathJax
    el = document.createElement('script');
    el.innerHTML = 'MathJax.Hub.Queue(["Typeset",MathJax.Hub]);';
    return document.head.appendChild(el);
  });
};
